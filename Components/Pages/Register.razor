@page "/register/{studentId:int}"
@using Registrar.Models
@using Registrar.Data
@using Microsoft.EntityFrameworkCore
@inject RegistrarContext DbContext
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger
@inject IJSRuntime JSRuntime


<h3>Register Courses</h3>

@if (student == null)
{
    <p>Loading...</p>
}
else
{
    <h4>@student.FirstName @student.LastName</h4>

    <EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit" FormName="registerForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @foreach (var course in availableCourses)
        {
            <div class="form-check">
                <InputCheckbox @bind-Value="course.IsSelected" id="@($"course-{course.Id}")" class="form-check-input" />
                <label class="form-check-label" for="@($"course-{course.Id}")">
                    @course.Code - @course.Title (@course.WeeklyHours hours/week)
                </label>
            </div>
        }

        <button type="submit" class="btn btn-primary mt-3">Register Courses</button>
    </EditForm>
}

<NavLink class="btn btn-secondary mt-3" href="/">Back to Students</NavLink>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    [Parameter]
    public int studentId { get; set; }

    private Student? student;
    private List<CourseViewModel> availableCourses = new List<CourseViewModel>();
    private RegistrationModel registrationModel = new RegistrationModel();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            student = await DbContext.Students.FindAsync(studentId);
            if (student == null)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            var courses = await DbContext.Courses.ToListAsync();
            var enrolledCourses = await DbContext.Registrations
                .Where(r => r.StudentId == studentId)
                .Select(r => r.CourseId)
                .ToListAsync();

            availableCourses = courses.Select(c => new CourseViewModel
            {
                Id = c.Id,
                Code = c.Code ?? "",
                Title = c.Title ?? "",
                WeeklyHours = c.WeeklyHours,
                IsSelected = enrolledCourses.Contains(c.Id)
            }).ToList();

            registrationModel.Courses = availableCourses;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading student and courses");
            errorMessage = "An error occurred while loading the data. Please try again.";
        }
    }

private async Task HandleValidSubmit()
{
    if (!registrationModel.Courses.Any(c => c.IsSelected))
    {
        errorMessage = "Please select at least one course.";
        return;
    }

    try
    {
        var existingRegistrations = await DbContext.Registrations
            .Where(r => r.StudentId == studentId)
            .ToListAsync();

        DbContext.Registrations.RemoveRange(existingRegistrations);

        foreach (var course in registrationModel.Courses.Where(c => c.IsSelected))
        {
            DbContext.Registrations.Add(new Registration
            {
                StudentId = studentId,
                CourseId = course.Id
            });
        }

        await DbContext.SaveChangesAsync();
        Logger.LogInformation($"Courses registered for student ID: {studentId}");
        await JSRuntime.InvokeVoidAsync("window.location.href", "/");
    }
    catch (Exception ex)
    {
        Logger.LogError(ex, "Error registering courses");
        errorMessage = "An error occurred while registering courses. Please try again.";
    }
}


    public class CourseViewModel
    {
        public int Id { get; set; }
        public string Code { get; set; } = "";
        public string Title { get; set; } = "";
        public int WeeklyHours { get; set; }
        public bool IsSelected { get; set; }
    }

    public class RegistrationModel
    {
        public List<CourseViewModel> Courses { get; set; } = new List<CourseViewModel>();
    }
}
